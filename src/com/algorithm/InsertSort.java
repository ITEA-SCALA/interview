package com.algorithm;

import java.util.Arrays;

/**
 * Сортировка вставками является эффективной сортировкой
 * Такая сортировка считается устойчивой (не меняет порядок одинаковых элементов)
 * В лучшем случае такая сортировка имеет линейную сложность — O(n)
 *
 * @see https://robotdreams.cc/blog/244-kakie-algoritmy-sortirovki-dolzhen-znat-junior-java-developer
 * ***
 * Итак, <сортировка вставками> имеет и недостутки и свои приимущества
 *
 * Приимущества:
 * 1. такой способ использует специальный алгоритм проверки, в итоге который уже уменьшает количество обращений к списку
 * 2. для работы с большими списками такая сортировка будет продуктивна, потому-что количество обращений к списку намного меньше
 *
 * Недостатки:
 * 1. чуть больше используется выделенных ресурсов для выполнения сортировки
 * 2. но для работаы со связанным списокм такой механизм не подходит,
 *      потому-что он заставляет повторно перебирать элементы связанного списка до нужной позиции
 */
public class InsertSort {

    public static void main(String[] args) {
        int[] array = {7, 8, 9, 1, 2, 3, 0, 6, 5, 4};

        System.out.println(Arrays.toString(array));

        for (int i = 0; i < array.length; i++) {
            /*
             * (сортировка-вставками похожа на сортировку выборкой)
             * За один проход, максимальный элемент сдвигается в крайнюю позицию
             * но, здесь мы уже не делаем полный проход, а только до первого найденного условного максимального-элемента
             */
            int maxVal = array[i];
            int j = i - 1;
            for (; j >= 0; j--) {
                if (maxVal < array[j]) {
                    array[j + 1] = array[j];
                } else {
                    break;
                }
            }
            array[j + 1] = maxVal;
        }

        System.out.println(Arrays.toString(array));
    }
}
